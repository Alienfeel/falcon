# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _falcon_core.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_falcon_core', [dirname(__file__)])
        except ImportError:
            import _falcon_core
            return _falcon_core
        if fp is not None:
            try:
                _mod = imp.load_module('_falcon_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _falcon_core = swig_import_helper()
    del swig_import_helper
else:
    import _falcon_core
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _falcon_core.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_falcon_core.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_falcon_core.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_falcon_core.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_falcon_core.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_falcon_core.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_falcon_core.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_falcon_core.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_falcon_core.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_falcon_core.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_falcon_core.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_falcon_core.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_falcon_core.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_falcon_core.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_falcon_core.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_falcon_core.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_falcon_core.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _falcon_core.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CompilerOp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_falcon_core.CompilerOp_code_get, _falcon_core.CompilerOp_code_set)
    arg = _swig_property(_falcon_core.CompilerOp_arg_get, _falcon_core.CompilerOp_arg_set)
    dead = _swig_property(_falcon_core.CompilerOp_dead_get, _falcon_core.CompilerOp_dead_set)
    regs = _swig_property(_falcon_core.CompilerOp_regs_get, _falcon_core.CompilerOp_regs_set)
    def __init__(self, *args): 
        _falcon_core.CompilerOp_swiginit(self,_falcon_core.new_CompilerOp(*args))
    __swig_destroy__ = _falcon_core.delete_CompilerOp
CompilerOp.str = new_instancemethod(_falcon_core.CompilerOp_str,None,CompilerOp)
CompilerOp_swigregister = _falcon_core.CompilerOp_swigregister
CompilerOp_swigregister(CompilerOp)

class BasicBlock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    py_offset = _swig_property(_falcon_core.BasicBlock_py_offset_get, _falcon_core.BasicBlock_py_offset_set)
    reg_offset = _swig_property(_falcon_core.BasicBlock_reg_offset_get, _falcon_core.BasicBlock_reg_offset_set)
    idx = _swig_property(_falcon_core.BasicBlock_idx_get, _falcon_core.BasicBlock_idx_set)
    exits = _swig_property(_falcon_core.BasicBlock_exits_get, _falcon_core.BasicBlock_exits_set)
    entries = _swig_property(_falcon_core.BasicBlock_entries_get, _falcon_core.BasicBlock_entries_set)
    code = _swig_property(_falcon_core.BasicBlock_code_get, _falcon_core.BasicBlock_code_set)
    visited = _swig_property(_falcon_core.BasicBlock_visited_get, _falcon_core.BasicBlock_visited_set)
    dead = _swig_property(_falcon_core.BasicBlock_dead_get, _falcon_core.BasicBlock_dead_set)
    def __init__(self, *args): 
        _falcon_core.BasicBlock_swiginit(self,_falcon_core.new_BasicBlock(*args))
    __swig_destroy__ = _falcon_core.delete_BasicBlock
BasicBlock.add_op = new_instancemethod(_falcon_core.BasicBlock_add_op,None,BasicBlock)
BasicBlock.add_varargs_op = new_instancemethod(_falcon_core.BasicBlock_add_varargs_op,None,BasicBlock)
BasicBlock_swigregister = _falcon_core.BasicBlock_swigregister
BasicBlock_swigregister(BasicBlock)

class Frame(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    target = _swig_property(_falcon_core.Frame_target_get, _falcon_core.Frame_target_set)
    stack_pos = _swig_property(_falcon_core.Frame_stack_pos_get, _falcon_core.Frame_stack_pos_set)
    def __init__(self): 
        _falcon_core.Frame_swiginit(self,_falcon_core.new_Frame())
    __swig_destroy__ = _falcon_core.delete_Frame
Frame_swigregister = _falcon_core.Frame_swigregister
Frame_swigregister(Frame)

class RegisterStack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    regs = _swig_property(_falcon_core.RegisterStack_regs_get, _falcon_core.RegisterStack_regs_set)
    stack_pos = _swig_property(_falcon_core.RegisterStack_stack_pos_get, _falcon_core.RegisterStack_stack_pos_set)
    frames = _swig_property(_falcon_core.RegisterStack_frames_get, _falcon_core.RegisterStack_frames_set)
    num_frames = _swig_property(_falcon_core.RegisterStack_num_frames_get, _falcon_core.RegisterStack_num_frames_set)
    def __init__(self): 
        _falcon_core.RegisterStack_swiginit(self,_falcon_core.new_RegisterStack())
    __swig_destroy__ = _falcon_core.delete_RegisterStack
RegisterStack.push_frame = new_instancemethod(_falcon_core.RegisterStack_push_frame,None,RegisterStack)
RegisterStack.pop_frame = new_instancemethod(_falcon_core.RegisterStack_pop_frame,None,RegisterStack)
RegisterStack.push_register = new_instancemethod(_falcon_core.RegisterStack_push_register,None,RegisterStack)
RegisterStack.pop_register = new_instancemethod(_falcon_core.RegisterStack_pop_register,None,RegisterStack)
RegisterStack.peek_register = new_instancemethod(_falcon_core.RegisterStack_peek_register,None,RegisterStack)
RegisterStack.str = new_instancemethod(_falcon_core.RegisterStack_str,None,RegisterStack)
RegisterStack_swigregister = _falcon_core.RegisterStack_swigregister
RegisterStack_swigregister(RegisterStack)

class CompilerState(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bbs = _swig_property(_falcon_core.CompilerState_bbs_get, _falcon_core.CompilerState_bbs_set)
    num_reg = _swig_property(_falcon_core.CompilerState_num_reg_get, _falcon_core.CompilerState_num_reg_set)
    num_consts = _swig_property(_falcon_core.CompilerState_num_consts_get, _falcon_core.CompilerState_num_consts_set)
    num_locals = _swig_property(_falcon_core.CompilerState_num_locals_get, _falcon_core.CompilerState_num_locals_set)
    py_codestr = _swig_property(_falcon_core.CompilerState_py_codestr_get, _falcon_core.CompilerState_py_codestr_set)
    py_codelen = _swig_property(_falcon_core.CompilerState_py_codelen_get, _falcon_core.CompilerState_py_codelen_set)
    def __init__(self, *args): 
        _falcon_core.CompilerState_swiginit(self,_falcon_core.new_CompilerState(*args))
    __swig_destroy__ = _falcon_core.delete_CompilerState
CompilerState.alloc_bb = new_instancemethod(_falcon_core.CompilerState_alloc_bb,None,CompilerState)
CompilerState.str = new_instancemethod(_falcon_core.CompilerState_str,None,CompilerState)
CompilerState.dump = new_instancemethod(_falcon_core.CompilerState_dump,None,CompilerState)
CompilerState_swigregister = _falcon_core.CompilerState_swigregister
CompilerState_swigregister(CompilerState)


def compileByteCode(*args):
  return _falcon_core.compileByteCode(*args)
compileByteCode = _falcon_core.compileByteCode

def compileRegCode(*args):
  return _falcon_core.compileRegCode(*args)
compileRegCode = _falcon_core.compileRegCode
REG_MAX_STACK = _falcon_core.REG_MAX_STACK
REG_MAX_FRAMES = _falcon_core.REG_MAX_FRAMES
REG_MAX_BBS = _falcon_core.REG_MAX_BBS
REG_MAGIC = _falcon_core.REG_MAGIC

def is_varargs_op(*args):
  return _falcon_core.is_varargs_op(*args)
is_varargs_op = _falcon_core.is_varargs_op

def is_branch_op(*args):
  return _falcon_core.is_branch_op(*args)
is_branch_op = _falcon_core.is_branch_op
INCREF = _falcon_core.INCREF
DECREF = _falcon_core.DECREF
class RegisterPrelude(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    magic = _swig_property(_falcon_core.RegisterPrelude_magic_get, _falcon_core.RegisterPrelude_magic_set)
    num_registers = _swig_property(_falcon_core.RegisterPrelude_num_registers_get, _falcon_core.RegisterPrelude_num_registers_set)
    mapped_labels = _swig_property(_falcon_core.RegisterPrelude_mapped_labels_get, _falcon_core.RegisterPrelude_mapped_labels_set)
    mapped_registers = _swig_property(_falcon_core.RegisterPrelude_mapped_registers_get, _falcon_core.RegisterPrelude_mapped_registers_set)
    reserved = _swig_property(_falcon_core.RegisterPrelude_reserved_get, _falcon_core.RegisterPrelude_reserved_set)
    def __init__(self): 
        _falcon_core.RegisterPrelude_swiginit(self,_falcon_core.new_RegisterPrelude())
    __swig_destroy__ = _falcon_core.delete_RegisterPrelude
RegisterPrelude_swigregister = _falcon_core.RegisterPrelude_swigregister
RegisterPrelude_swigregister(RegisterPrelude)

class OpHeader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_falcon_core.OpHeader_code_get, _falcon_core.OpHeader_code_set)
    arg = _swig_property(_falcon_core.OpHeader_arg_get, _falcon_core.OpHeader_arg_set)
    def __init__(self): 
        _falcon_core.OpHeader_swiginit(self,_falcon_core.new_OpHeader())
    __swig_destroy__ = _falcon_core.delete_OpHeader
OpHeader_swigregister = _falcon_core.OpHeader_swigregister
OpHeader_swigregister(OpHeader)

class BranchOp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_falcon_core.BranchOp_code_get, _falcon_core.BranchOp_code_set)
    arg = _swig_property(_falcon_core.BranchOp_arg_get, _falcon_core.BranchOp_arg_set)
    reg_1 = _swig_property(_falcon_core.BranchOp_reg_1_get, _falcon_core.BranchOp_reg_1_set)
    reg_2 = _swig_property(_falcon_core.BranchOp_reg_2_get, _falcon_core.BranchOp_reg_2_set)
    label = _swig_property(_falcon_core.BranchOp_label_get, _falcon_core.BranchOp_label_set)
    def __init__(self): 
        _falcon_core.BranchOp_swiginit(self,_falcon_core.new_BranchOp())
    __swig_destroy__ = _falcon_core.delete_BranchOp
BranchOp_swigregister = _falcon_core.BranchOp_swigregister
BranchOp_swigregister(BranchOp)

class RegOp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_falcon_core.RegOp_code_get, _falcon_core.RegOp_code_set)
    arg = _swig_property(_falcon_core.RegOp_arg_get, _falcon_core.RegOp_arg_set)
    reg_1 = _swig_property(_falcon_core.RegOp_reg_1_get, _falcon_core.RegOp_reg_1_set)
    reg_2 = _swig_property(_falcon_core.RegOp_reg_2_get, _falcon_core.RegOp_reg_2_set)
    reg_3 = _swig_property(_falcon_core.RegOp_reg_3_get, _falcon_core.RegOp_reg_3_set)
    def __init__(self): 
        _falcon_core.RegOp_swiginit(self,_falcon_core.new_RegOp())
    __swig_destroy__ = _falcon_core.delete_RegOp
RegOp_swigregister = _falcon_core.RegOp_swigregister
RegOp_swigregister(RegOp)

class VarRegOp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_falcon_core.VarRegOp_code_get, _falcon_core.VarRegOp_code_set)
    arg = _swig_property(_falcon_core.VarRegOp_arg_get, _falcon_core.VarRegOp_arg_set)
    num_registers = _swig_property(_falcon_core.VarRegOp_num_registers_get, _falcon_core.VarRegOp_num_registers_set)
    regs = _swig_property(_falcon_core.VarRegOp_regs_get, _falcon_core.VarRegOp_regs_set)
    def __init__(self): 
        _falcon_core.VarRegOp_swiginit(self,_falcon_core.new_VarRegOp())
    __swig_destroy__ = _falcon_core.delete_VarRegOp
VarRegOp_swigregister = _falcon_core.VarRegOp_swigregister
VarRegOp_swigregister(VarRegOp)

class RMachineOp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    size = staticmethod(_falcon_core.RMachineOp_size)
    def __init__(self): 
        _falcon_core.RMachineOp_swiginit(self,_falcon_core.new_RMachineOp())
    __swig_destroy__ = _falcon_core.delete_RMachineOp
RMachineOp.code = new_instancemethod(_falcon_core.RMachineOp_code,None,RMachineOp)
RMachineOp.arg = new_instancemethod(_falcon_core.RMachineOp_arg,None,RMachineOp)
RMachineOp_swigregister = _falcon_core.RMachineOp_swigregister
RMachineOp_swigregister(RMachineOp)

def RMachineOp_size(*args):
  return _falcon_core.RMachineOp_size(*args)
RMachineOp_size = _falcon_core.RMachineOp_size

class RegisterFrame(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    frame = _swig_property(_falcon_core.RegisterFrame_frame_get, _falcon_core.RegisterFrame_frame_set)
    regcode = _swig_property(_falcon_core.RegisterFrame_regcode_get, _falcon_core.RegisterFrame_regcode_set)
    def __init__(self, *args): 
        _falcon_core.RegisterFrame_swiginit(self,_falcon_core.new_RegisterFrame(*args))
    __swig_destroy__ = _falcon_core.delete_RegisterFrame
RegisterFrame_swigregister = _falcon_core.RegisterFrame_swigregister
RegisterFrame_swigregister(RegisterFrame)

class Evaluator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    opCounts = _swig_property(_falcon_core.Evaluator_opCounts_get, _falcon_core.Evaluator_opCounts_set)
    opTimes = _swig_property(_falcon_core.Evaluator_opTimes_get, _falcon_core.Evaluator_opTimes_set)
    totalCount = _swig_property(_falcon_core.Evaluator_totalCount_get, _falcon_core.Evaluator_totalCount_set)
    lastClock = _swig_property(_falcon_core.Evaluator_lastClock_get, _falcon_core.Evaluator_lastClock_set)
    def __init__(self): 
        _falcon_core.Evaluator_swiginit(self,_falcon_core.new_Evaluator())
    __swig_destroy__ = _falcon_core.delete_Evaluator
Evaluator.eval = new_instancemethod(_falcon_core.Evaluator_eval,None,Evaluator)
Evaluator.evalPython = new_instancemethod(_falcon_core.Evaluator_evalPython,None,Evaluator)
Evaluator.buildFrameFromPython = new_instancemethod(_falcon_core.Evaluator_buildFrameFromPython,None,Evaluator)
Evaluator.buildFrameFromRegCode = new_instancemethod(_falcon_core.Evaluator_buildFrameFromRegCode,None,Evaluator)
Evaluator.dumpStatus = new_instancemethod(_falcon_core.Evaluator_dumpStatus,None,Evaluator)
Evaluator_swigregister = _falcon_core.Evaluator_swigregister
Evaluator_swigregister(Evaluator)

class CodeVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _falcon_core.CodeVector_swiginit(self,_falcon_core.new_CodeVector(*args))
    __swig_destroy__ = _falcon_core.delete_CodeVector
CodeVector.iterator = new_instancemethod(_falcon_core.CodeVector_iterator,None,CodeVector)
CodeVector.__nonzero__ = new_instancemethod(_falcon_core.CodeVector___nonzero__,None,CodeVector)
CodeVector.__bool__ = new_instancemethod(_falcon_core.CodeVector___bool__,None,CodeVector)
CodeVector.__len__ = new_instancemethod(_falcon_core.CodeVector___len__,None,CodeVector)
CodeVector.pop = new_instancemethod(_falcon_core.CodeVector_pop,None,CodeVector)
CodeVector.__getslice__ = new_instancemethod(_falcon_core.CodeVector___getslice__,None,CodeVector)
CodeVector.__setslice__ = new_instancemethod(_falcon_core.CodeVector___setslice__,None,CodeVector)
CodeVector.__delslice__ = new_instancemethod(_falcon_core.CodeVector___delslice__,None,CodeVector)
CodeVector.__delitem__ = new_instancemethod(_falcon_core.CodeVector___delitem__,None,CodeVector)
CodeVector.__getitem__ = new_instancemethod(_falcon_core.CodeVector___getitem__,None,CodeVector)
CodeVector.__setitem__ = new_instancemethod(_falcon_core.CodeVector___setitem__,None,CodeVector)
CodeVector.append = new_instancemethod(_falcon_core.CodeVector_append,None,CodeVector)
CodeVector.empty = new_instancemethod(_falcon_core.CodeVector_empty,None,CodeVector)
CodeVector.size = new_instancemethod(_falcon_core.CodeVector_size,None,CodeVector)
CodeVector.clear = new_instancemethod(_falcon_core.CodeVector_clear,None,CodeVector)
CodeVector.swap = new_instancemethod(_falcon_core.CodeVector_swap,None,CodeVector)
CodeVector.get_allocator = new_instancemethod(_falcon_core.CodeVector_get_allocator,None,CodeVector)
CodeVector.begin = new_instancemethod(_falcon_core.CodeVector_begin,None,CodeVector)
CodeVector.end = new_instancemethod(_falcon_core.CodeVector_end,None,CodeVector)
CodeVector.rbegin = new_instancemethod(_falcon_core.CodeVector_rbegin,None,CodeVector)
CodeVector.rend = new_instancemethod(_falcon_core.CodeVector_rend,None,CodeVector)
CodeVector.pop_back = new_instancemethod(_falcon_core.CodeVector_pop_back,None,CodeVector)
CodeVector.erase = new_instancemethod(_falcon_core.CodeVector_erase,None,CodeVector)
CodeVector.push_back = new_instancemethod(_falcon_core.CodeVector_push_back,None,CodeVector)
CodeVector.front = new_instancemethod(_falcon_core.CodeVector_front,None,CodeVector)
CodeVector.back = new_instancemethod(_falcon_core.CodeVector_back,None,CodeVector)
CodeVector.assign = new_instancemethod(_falcon_core.CodeVector_assign,None,CodeVector)
CodeVector.resize = new_instancemethod(_falcon_core.CodeVector_resize,None,CodeVector)
CodeVector.insert = new_instancemethod(_falcon_core.CodeVector_insert,None,CodeVector)
CodeVector.reserve = new_instancemethod(_falcon_core.CodeVector_reserve,None,CodeVector)
CodeVector.capacity = new_instancemethod(_falcon_core.CodeVector_capacity,None,CodeVector)
CodeVector_swigregister = _falcon_core.CodeVector_swigregister
CodeVector_swigregister(CodeVector)

class BlockVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _falcon_core.BlockVector_swiginit(self,_falcon_core.new_BlockVector(*args))
    __swig_destroy__ = _falcon_core.delete_BlockVector
BlockVector.iterator = new_instancemethod(_falcon_core.BlockVector_iterator,None,BlockVector)
BlockVector.__nonzero__ = new_instancemethod(_falcon_core.BlockVector___nonzero__,None,BlockVector)
BlockVector.__bool__ = new_instancemethod(_falcon_core.BlockVector___bool__,None,BlockVector)
BlockVector.__len__ = new_instancemethod(_falcon_core.BlockVector___len__,None,BlockVector)
BlockVector.pop = new_instancemethod(_falcon_core.BlockVector_pop,None,BlockVector)
BlockVector.__getslice__ = new_instancemethod(_falcon_core.BlockVector___getslice__,None,BlockVector)
BlockVector.__setslice__ = new_instancemethod(_falcon_core.BlockVector___setslice__,None,BlockVector)
BlockVector.__delslice__ = new_instancemethod(_falcon_core.BlockVector___delslice__,None,BlockVector)
BlockVector.__delitem__ = new_instancemethod(_falcon_core.BlockVector___delitem__,None,BlockVector)
BlockVector.__getitem__ = new_instancemethod(_falcon_core.BlockVector___getitem__,None,BlockVector)
BlockVector.__setitem__ = new_instancemethod(_falcon_core.BlockVector___setitem__,None,BlockVector)
BlockVector.append = new_instancemethod(_falcon_core.BlockVector_append,None,BlockVector)
BlockVector.empty = new_instancemethod(_falcon_core.BlockVector_empty,None,BlockVector)
BlockVector.size = new_instancemethod(_falcon_core.BlockVector_size,None,BlockVector)
BlockVector.clear = new_instancemethod(_falcon_core.BlockVector_clear,None,BlockVector)
BlockVector.swap = new_instancemethod(_falcon_core.BlockVector_swap,None,BlockVector)
BlockVector.get_allocator = new_instancemethod(_falcon_core.BlockVector_get_allocator,None,BlockVector)
BlockVector.begin = new_instancemethod(_falcon_core.BlockVector_begin,None,BlockVector)
BlockVector.end = new_instancemethod(_falcon_core.BlockVector_end,None,BlockVector)
BlockVector.rbegin = new_instancemethod(_falcon_core.BlockVector_rbegin,None,BlockVector)
BlockVector.rend = new_instancemethod(_falcon_core.BlockVector_rend,None,BlockVector)
BlockVector.pop_back = new_instancemethod(_falcon_core.BlockVector_pop_back,None,BlockVector)
BlockVector.erase = new_instancemethod(_falcon_core.BlockVector_erase,None,BlockVector)
BlockVector.push_back = new_instancemethod(_falcon_core.BlockVector_push_back,None,BlockVector)
BlockVector.front = new_instancemethod(_falcon_core.BlockVector_front,None,BlockVector)
BlockVector.back = new_instancemethod(_falcon_core.BlockVector_back,None,BlockVector)
BlockVector.assign = new_instancemethod(_falcon_core.BlockVector_assign,None,BlockVector)
BlockVector.resize = new_instancemethod(_falcon_core.BlockVector_resize,None,BlockVector)
BlockVector.insert = new_instancemethod(_falcon_core.BlockVector_insert,None,BlockVector)
BlockVector.reserve = new_instancemethod(_falcon_core.BlockVector_reserve,None,BlockVector)
BlockVector.capacity = new_instancemethod(_falcon_core.BlockVector_capacity,None,BlockVector)
BlockVector_swigregister = _falcon_core.BlockVector_swigregister
BlockVector_swigregister(BlockVector)

class RegVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _falcon_core.RegVector_swiginit(self,_falcon_core.new_RegVector(*args))
    __swig_destroy__ = _falcon_core.delete_RegVector
RegVector.iterator = new_instancemethod(_falcon_core.RegVector_iterator,None,RegVector)
RegVector.__nonzero__ = new_instancemethod(_falcon_core.RegVector___nonzero__,None,RegVector)
RegVector.__bool__ = new_instancemethod(_falcon_core.RegVector___bool__,None,RegVector)
RegVector.__len__ = new_instancemethod(_falcon_core.RegVector___len__,None,RegVector)
RegVector.pop = new_instancemethod(_falcon_core.RegVector_pop,None,RegVector)
RegVector.__getslice__ = new_instancemethod(_falcon_core.RegVector___getslice__,None,RegVector)
RegVector.__setslice__ = new_instancemethod(_falcon_core.RegVector___setslice__,None,RegVector)
RegVector.__delslice__ = new_instancemethod(_falcon_core.RegVector___delslice__,None,RegVector)
RegVector.__delitem__ = new_instancemethod(_falcon_core.RegVector___delitem__,None,RegVector)
RegVector.__getitem__ = new_instancemethod(_falcon_core.RegVector___getitem__,None,RegVector)
RegVector.__setitem__ = new_instancemethod(_falcon_core.RegVector___setitem__,None,RegVector)
RegVector.append = new_instancemethod(_falcon_core.RegVector_append,None,RegVector)
RegVector.empty = new_instancemethod(_falcon_core.RegVector_empty,None,RegVector)
RegVector.size = new_instancemethod(_falcon_core.RegVector_size,None,RegVector)
RegVector.clear = new_instancemethod(_falcon_core.RegVector_clear,None,RegVector)
RegVector.swap = new_instancemethod(_falcon_core.RegVector_swap,None,RegVector)
RegVector.get_allocator = new_instancemethod(_falcon_core.RegVector_get_allocator,None,RegVector)
RegVector.begin = new_instancemethod(_falcon_core.RegVector_begin,None,RegVector)
RegVector.end = new_instancemethod(_falcon_core.RegVector_end,None,RegVector)
RegVector.rbegin = new_instancemethod(_falcon_core.RegVector_rbegin,None,RegVector)
RegVector.rend = new_instancemethod(_falcon_core.RegVector_rend,None,RegVector)
RegVector.pop_back = new_instancemethod(_falcon_core.RegVector_pop_back,None,RegVector)
RegVector.erase = new_instancemethod(_falcon_core.RegVector_erase,None,RegVector)
RegVector.push_back = new_instancemethod(_falcon_core.RegVector_push_back,None,RegVector)
RegVector.front = new_instancemethod(_falcon_core.RegVector_front,None,RegVector)
RegVector.back = new_instancemethod(_falcon_core.RegVector_back,None,RegVector)
RegVector.assign = new_instancemethod(_falcon_core.RegVector_assign,None,RegVector)
RegVector.resize = new_instancemethod(_falcon_core.RegVector_resize,None,RegVector)
RegVector.insert = new_instancemethod(_falcon_core.RegVector_insert,None,RegVector)
RegVector.reserve = new_instancemethod(_falcon_core.RegVector_reserve,None,RegVector)
RegVector.capacity = new_instancemethod(_falcon_core.RegVector_capacity,None,RegVector)
RegVector_swigregister = _falcon_core.RegVector_swigregister
RegVector_swigregister(RegVector)

def disown_class(c):
  old_init = c.__init__
  def new_init(self, *args):
    old_init(self, *args)
    self.thisown = 0
  c.__init__ = new_init

disown_class(CompilerOp)
 



